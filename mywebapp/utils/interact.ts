const { createAlchemyWeb3 } = require("@alch/alchemy-web3");
const web3 = createAlchemyWeb3(process.env.NEXT_PUBLIC_API_URL);

const contract = require("../artifacts/contracts/EmojiFaces.sol/EmojiFaces.json");
const contractAddress = "0x249F5fF0D0A4604912e2C27107cb5c22d8eD8dE1";
const nftContract = new web3.eth.Contract(contract.abi, contractAddress);

import Web3 from 'web3'; 
declare global {
  interface Window {
      ethereum: MetaMaskInpageProvider;
  }
}

export const connectWallet = async () => {

  if (window.ethereum) {
    try {
      const addressArray = await window.ethereum.request({
        method: "eth_requestAccounts",
      });

      const obj = {
        status: "",
        address: addressArray[0],
      };

      return obj;
    } catch (err) {
      return {
        address: "",
        status: "😞" + err.message,
      };
    }
  } else {
    return {
      address: "",
      status: (
        <span>
          <p>
            {" "}
            🦊{" "}
            <a target="_blank" href="https://metamask.io/download.html">
              You must install MetaMask, a virtual Ethereum wallet, in your
              browser.
            </a>
          </p>
        </span>
      ),
    };
  }
};